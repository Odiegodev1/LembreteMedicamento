generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  username      String?   @unique
  bio           String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts    Account[]
  sessions    Session[]
  socialLinks SocialLink[]

  medicamentos Medicamento[] // <-- ADICIONADO aqui

  @@map("users")
}

model Medicamento {
  id              String    @id @default(cuid())
  nome            String
  horarios        Json // lista de horários no dia (["08:00", "12:00", "20:00"])
  tipoRecorrencia String // "diario", "cada_x_dias", "semanal", "mensal"
  intervaloDias   Int? // usado se tipoRecorrencia = "cada_x_dias"
  diasSemana      Json? // usado se tipoRecorrencia = "semanal" (["Seg", "Qua", "Sex"])
  dataInicio      DateTime
  dataFim         DateTime?
  criadoEm        DateTime  @default(now())

  // relacionamento com usuário que criou o medicamento
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialLink {
  id       String @id @default(cuid())
  url      String
  platform String // ex: "twitter", "instagram"
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
